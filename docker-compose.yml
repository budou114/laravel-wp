version: '3'
services:
  nginx:
    container_name: "nginx"
    build:
      context: ./nginx
    ports:
      - 80:80
    volumes:
      - ./:/src
    networks:
      - docker-network
    depends_on:
      - php

  php:
    container_name: "php"
    build:
      context: ./php
    ports:
      - "9000:9000"
    volumes:
      - ./laravel/:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/php.ini
    networks:
      - docker-network
    depends_on:
      - mysql

  mysql:
    image: mysql:8.0
    container_name: "mysql"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - 3306:3306
    networks:
      - docker-network
    volumes:
      - mysql-data:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: ${DB_USERNAME}
      PMA_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8080:80"
    networks:
      - docker-network
    depends_on:
      - mysql
    platform: linux/amd64

  redis:
    image: redis:alpine
    container_name: "redis"
    ports:
      - 16379:6379
    volumes:
      - redis-data:/data

  wordpress:
    image: wordpress:latest
    container_name: wordpress
    ports:
      - "8000:80"
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: ${DB_USERNAME}
      WORDPRESS_DB_PASSWORD: ${DB_PASSWORD}
      WORDPRESS_DB_NAME: ${DB_DATABASE}
    depends_on:
      - mysql
    networks:
      - docker-network
    volumes:
      - ./wordpress:/var/www/html

networks:
  docker-network:
    driver: bridge

volumes:
  mysql-data:
    name: mysql-data
    driver: local

  redis-data:
    name: redis-data
    driver: local